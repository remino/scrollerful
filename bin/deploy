#!/bin/sh
# deploy
# shellcheck disable=SC2317

deploy_main() {
	trap _exit INT TERM

	E_ARGS=16
	E_MISSING_APP=17
	E_MISSING_ENV=18

	SCRIPT_INT="$( basename "$0" )"
	SCRIPT_PATH="$( readlink -f "$0" )"
	SCRIPT_DIR="$( dirname "$SCRIPT_PATH" )"
	ROOT_DIR="$( dirname "$SCRIPT_DIR" )"

	DRY_RUN_ARG='-n'

	while getopts c:hr opt
	do
		case $opt in
			c) _load_config "$OPTARG" ;;
			h) CMD=help ;;
			r) DRY_RUN_ARG= ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ -z "$CMD" ] && CMD="process"

	case "$CMD" in
		help|process) "deploy_$CMD" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

deploy_help() {
cat <<USAGE
Usage: $SCRIPT_INT [-hr] -c <file> [<rsync_args>]

Deploy site.

Options:

	-c <file>   Specify config file location.
	-h          Show this help screen.
	-r          Run deploy.
	            When not specified, a dry run is performed by default.

USAGE
}

deploy_process() {
	_require rsync
	_init

	# shellcheck disable=SC2086
	rsync \
		-aOJvz \
		--delete-after \
		--no-perms \
		--progress \
		$DRY_RUN_ARG \
		"$@" \
		"$ROOT_DIR/$DEPLOY_SRC" \
		"$DEPLOY_DEST" \
	;
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_init() {
	missing=""

	[ -z "$DEPLOY_DEST" ] && missing="${missing}DEPLOY_DEST "
	[ -z "$DEPLOY_SRC" ] && missing="${missing}DEPLOY_SRC "

	echo "DEPLOY_DEST=$DEPLOY_DEST"
	echo "DEPLOY_SRC=$DEPLOY_SRC"

	[ -n "$missing" ] && _fatal "$E_MISSING_ENV" "Missing env vars: $missing"
}

_invalid_cmd() {
	_error "Invalid command: $CMD"
	_echo
	deploy_help
	exit $E_ARGS
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	deploy_help
	exit $E_ARGS
}

_load_config() {
	rc="$1"

	[ ! -f "$rc" ] && return

	eval "$(
		# shellcheck source=/dev/null
		. "$rc"
		echo "DEPLOY_DEST=$DEPLOY_DEST"
		echo "DEPLOY_SRC=$DEPLOY_SRC"
	)"

	[ -n "$DEPLOY_DEST" ] && export DEPLOY_DEST
	[ -n "$DEPLOY_SRC" ] && export DEPLOY_SRC
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ "$missing_bin" -ne 0 ]
	then
		_fatal "$E_MISSING_APP" "One or more executables or apps are missing."
	fi
}

deploy_main "$@"
